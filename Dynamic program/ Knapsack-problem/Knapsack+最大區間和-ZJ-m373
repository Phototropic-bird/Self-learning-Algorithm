//============================================================================
// Concept     : Knapsack + 最大區間和
// Description : m373. 投資遊戲 from ZeroJuge
//============================================================================
#include <bits/stdc++.h>
using namespace::std;
#define ll long long
ll a[150000+10];
ll dp[20+1][150000+10];//1_BASE
ll n,k;
ll ans=0;
int main(){
	cin>>n>>k;
	for(int i=0;i<n;i++) cin>>a[i];
	dp[0][0]=0;
	for(int i=1;i<=n;i++){
		dp[0][i]=max(dp[0][i-1]+a[i-1],a[i-1]);
		dp[0][i]=max((ll)0,dp[0][i]);
		ans=max(dp[0][i],ans);
	}
	for(int j=1;j<=k;j++){
		for(int i=1;i<=n;i++){
			dp[j][i]=max(dp[j][i-1]+a[i-1],dp[j-1][i-1]);	//不放  / 放
			dp[j][i]=max((ll)0,dp[j][i]);	//不放要取前一個加a[i] 放要取前一層前一個加0
			ans=max(ans,dp[j][i]);		//每一層代表一個金牌dp[i]的最優解
		}											//因為給一個金牌和給兩個金牌的情況可能不同
	}												//所以按每個金牌列最優解//一層只會有一個金牌
	cout<<ans;
	return 0;
}
/*
 * 簡單來說，每一層中只有一個金牌，所以看前一層來決定金牌的使用
 * 如果遇到a[i]不放就要用同層的前一個+a[i]。但如果放了只能看 前一層的前一個+0 ，不能 同層前一個+0 是因為這樣就不符合"每一層一個金牌"
 * 這和0/1背包有一點像，只能看上一層的解，不能看同一層的解，這樣會重複取物
 * 如果不論放還是不放都看同層的話，就會變成只要一遇到負就放金牌。
 */
