//============================================================================
// Concept     : 二維區間DP
// Description : 刪除邊界 from TCIRC
//============================================================================
#include<bits/stdc++.h>
using namespace::std;
int dp[25+1][25+1][25+1][25+1];
int a[25+1][25+1];
int delinecost(int x1,int y1,int x2,int y2){
	int l_sum=0,o_sum=0;
	if(x1==x2){
		for(int i=y1;i<=y2;i++){
			if(a[i][x1]==0) o_sum++;
			else l_sum++;
		}
	}else{
		for(int i=x1;i<=x2;i++){
			if(a[y1][i]==0) o_sum++;
			else l_sum++;
		}
	}
	return min(l_sum,o_sum);
}
int mmin(int a,int b,int c,int d){
	int small=INT_MAX;
	if(a<small) small=a;
	if(b<small) small=b;
	if(c<small) small=c;
	if(d<small) small=d;
	return small;
}
int main(){
	int n,m;
	cin>>n>>m;
	memset(dp,0,sizeof(dp));
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			cin>>a[i][j];
	int eme=0;
	for(int i=1;i<n;i++){		
		for(int j=1;j<m;j++){	 
			for(int px=0;px+j<m;px++){
				for(int py=0;py+i<n;py++){
					dp[px][py][px+j][py+i]=mmin(delinecost(px,py,px,py+i)+dp[px+1][py][px+j][py+i],
											   delinecost(px+j,py,px+j,py+i)+dp[px][py][px+j-1][py+i],
											   delinecost(px,py,px+j,py)+dp[px][py+1][px+j][py+i],
											   delinecost(px,py+i,px+j,py+i)+dp[px][py][px+j][py+i-1]);
				}
			}
		}
	}
	cout<<dp[0][0][m-1][n-1];
	return 0;
}
