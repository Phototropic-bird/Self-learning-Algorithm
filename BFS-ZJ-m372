//============================================================================
// Concept     : BFS (DFS works too)
// Description : m372 搬家 from ZeroJuge
//============================================================================
#include <bits/stdc++.h>
using namespace::std;
bool vis[505][505];
char a[505][505];
int n,m;

int solve(int t,int s){
    vis[t][s]=1;
    int ss=0; //紀錄塊數
    queue<pair<int,int>> que;	//BFS所使用的佇列
    que.push({t,s});
    while(!que.empty()){//不斷檢查訪問過的位子的周圍
                //直到所有位子的周圍都沒有連通塊則停止
        ss++;
        int i=que.front().first, j=que.front().second; //新的座標
        char c=a[i][j];
        if(c=='X' || c=='H' || c=='L' || c=='F'){   //right
            if(j+1<m && !vis[i][j+1] &&(a[i][j+1]=='X' || a[i][j+1]=='H' || a[i][j+1]=='7' || a[i][j+1]=='J')){
                vis[i][j+1]=1; //訪問過了則標記
                que.push({i,j+1});
            }
        }
        if(c=='X' || c=='I' || c=='7' || c=='F'){   //down
            if(i+1<n && !vis[i+1][j] && (a[i+1][j]=='X' || a[i+1][j]=='I'|| a[i+1][j]=='L' || a[i+1][j]=='J')){
                vis[i+1][j]=1; 
                que.push({i+1,j});
            }
        }
        if(c=='X' || c=='I' || c=='L' || c=='J'){   //up
            if(i-1>=0 && !vis[i-1][j] && (a[i-1][j]=='X' || a[i-1][j]=='I' || a[i-1][j]=='7' || a[i-1][j]=='F')){
                vis[i-1][j]=1; 
                que.push({i-1,j});
            }
        }
        if(c=='X' || c=='H' || c=='7' || c=='J'){   //left
            if(j-1>=0 && !vis[i][j-1] &&(a[i][j-1]=='X' || a[i][j-1]=='H' || a[i][j-1]=='L' || a[i][j-1]=='F')){
                vis[i][j-1]=1; 
                que.push({i,j-1});
            }
        }
        que.pop();
    }
    return ss;
}

int main(){
	cin>>n>>m;
	for(int i=0; i<n; i++){
		for(int j=0; j<m; j++){
			cin>>a[i][j];
		}
	}
	int ans =INT_MIN;
	for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(a[i][j]=='0') vis[i][j]=1;
            if(!vis[i][j]){
                ans=max(ans,solve(i,j));
            }
        }
    }//遍歷陣列//若沒被訪過則進入處理
	cout<<ans;
	return 0;
} 
